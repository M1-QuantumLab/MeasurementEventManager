#! python
'''
Start up a MeasurementEventManager instance with the specified sockets.
'''

from __future__ import print_function
import itertools

import zmq

import measurement_event_manager as mem


###############################################################################
## Initialize ZMQ messaging
###############################################################################

PROTOCOL_ID = "MEM-GR/0.1"
REQUEST_TIMEOUT = 2500
CLIENT_ENDPOINT = 'tcp://*:5555'

context = zmq.Context()

server = context.socket(zmq.REP)
server.bind(CLIENT_ENDPOINT)


###############################################################################
## Listen for requests
###############################################################################

print('Listening on endpoint', CLIENT_ENDPOINT)

for server_cycles in itertools.count():
    
    ## Receive request
    ##################

    request = server.recv_multipart()
    print('Request received.')


    ## Parse request
    ################

    print('Request content is:')
    print(request)
    ## Unpack request content
    req_protocol = request[0]
    req_type = request[1]
    req_content = request[2:]

    ## Make sure we have the correct protocol
    if not (req_protocol == PROTOCOL_ID):
        print('Unrecognized protocol {}'.format(req_protocol))
        server.send_multipart([PROTOCOL_ID.encode(), b'ERR',])

    ## Check the type of request and parse content accordingly
    if req_type == 'IDN':
        print('Identifying to client')
        server.send_multipart([PROTOCOL_ID.encode(),
                               b'IDN',
                               'MeasurementEventManager at {}'.format(
                                                CLIENT_ENDPOINT).encode()])
        print('Response sent.')
    elif req_type == 'ADD':
        pass

